class UNet(nn.Module):
    def __init__(self, in_channels, out_channels):
        super(UNet, self).__init__()

        
        self.encoder1 = self._block(in_channels, 32)  
        self.encoder2 = self._block(32, 64)         
        self.encoder3 = self._block(64, 128)        

        # Capas de decodificador
        self.upconv3 = nn.ConvTranspose2d(128, 64, kernel_size=2, stride=2)
        self.decoder3 = self._block(128, 64)  
        self.upconv2 = nn.ConvTranspose2d(64, 32, kernel_size=2, stride=2)
        self.decoder2 = self._block(64, 32)   
        self.decoder1 = self._block(32, out_channels, final_layer=True)

        self.pool = nn.MaxPool2d(kernel_size=2, stride=2)

    def _block(self, in_channels, features, final_layer=False):
        layers = [
            nn.Conv2d(in_channels, features, kernel_size=3, padding=1),
            nn.BatchNorm2d(features),
            nn.ReLU(inplace=True),
            nn.Conv2d(features, features, kernel_size=3, padding=1),
            nn.BatchNorm2d(features),
            nn.ReLU(inplace=True)
        ]
        if final_layer:
            layers.append(nn.Conv2d(features, out_channels, kernel_size=1))
            layers.append(nn.Sigmoid())
        return nn.Sequential(*layers)

    def forward(self, x):
        # encoder
        enc1 = self.encoder1(x)
        enc2 = self.encoder2(self.pool(enc1))
        enc3 = self.encoder3(self.pool(enc2))
        
        # decoder
        dec3 = self.upconv3(enc3)
        dec3 = torch.cat((dec3, enc2), dim=1)
        dec3 = self.decoder3(dec3)
        dec2 = self.upconv2(dec3)
        dec2 = torch.cat((dec2, enc1), dim=1)
        dec2 = self.decoder2(dec2)
        dec1 = self.decoder1(dec2)
        
        return dec1
    
